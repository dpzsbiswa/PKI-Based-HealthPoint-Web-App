#!/usr/bin/env python3
"""
Runtime Error Test Script for HealthPoint Application
Tests all major components for potential runtime errors
"""

import sys
import os
import traceback

def test_imports():
    """Test all critical imports"""
    print("üîç Testing imports...")
    
    try:
        from flask import Flask
        print("‚úÖ Flask imported successfully")
    except ImportError as e:
        print(f"‚ùå Flask import error: {e}")
        return False
    
    try:
        from werkzeug.security import generate_password_hash, check_password_hash
        print("‚úÖ Werkzeug security imported successfully")
    except ImportError as e:
        print(f"‚ùå Werkzeug security import error: {e}")
        return False
    
    try:
        from sqlalchemy import create_engine
        print("‚úÖ SQLAlchemy imported successfully")
    except ImportError as e:
        print(f"‚ùå SQLAlchemy import error: {e}")
        return False
    
    try:
        import requests
        print("‚úÖ Requests imported successfully")
    except ImportError as e:
        print(f"‚ùå Requests import error: {e}")
        return False
    
    try:
        import hmac
        import hashlib
        import base64
        print("‚úÖ Crypto modules imported successfully")
    except ImportError as e:
        print(f"‚ùå Crypto modules import error: {e}")
        return False
    
    return True

def test_app_creation():
    """Test Flask app creation"""
    print("\nüîç Testing Flask app creation...")
    
    try:
        from app import app
        print("‚úÖ Flask app created successfully")
        return True
    except Exception as e:
        print(f"‚ùå Flask app creation error: {e}")
        traceback.print_exc()
        return False

def test_esewa_utility():
    """Test eSewa payment utility"""
    print("\nüîç Testing eSewa payment utility...")
    
    try:
        from utils.esewa import ESewaPayment
        esewa = ESewaPayment()
        print("‚úÖ ESewaPayment class created successfully")
        
        # Test signature generation
        signature = esewa.generate_signature("110", "test-123", "EPAYTEST")
        print("‚úÖ Signature generation works")
        
        # Test transaction UUID generation
        uuid = esewa.generate_transaction_uuid()
        print(f"‚úÖ Transaction UUID generated: {uuid}")
        
        return True
    except Exception as e:
        print(f"‚ùå eSewa utility error: {e}")
        traceback.print_exc()
        return False

def test_database_models():
    """Test database models"""
    print("\nüîç Testing database models...")
    
    try:
        from models.payment import Payment
        print("‚úÖ Payment model imported successfully")
        
        from models.appointment import Appointment
        print("‚úÖ Appointment model imported successfully")
        
        from models.user import User
        print("‚úÖ User model imported successfully")
        
        return True
    except Exception as e:
        print(f"‚ùå Database models error: {e}")
        traceback.print_exc()
        return False

def test_payment_flow():
    """Test payment flow logic"""
    print("\nüîç Testing payment flow logic...")
    
    try:
        from utils.esewa import ESewaPayment
        
        # Create a mock appointment object
        class MockAppointment:
            def __init__(self):
                self.id = 1
                self.doctor = MockDoctor()
        
        class MockDoctor:
            def __init__(self):
                self.consultation_fee = 100
        
        mock_appointment = MockAppointment()
        
        # Test payment form data creation
        esewa = ESewaPayment()
        form_data, transaction_uuid = esewa.create_payment_form_data(
            appointment=mock_appointment,
            amount=100,
            tax_amount=13
        )
        
        print("‚úÖ Payment form data created successfully")
        print(f"   Transaction UUID: {transaction_uuid}")
        print(f"   Total Amount: {form_data.get('total_amount')}")
        print(f"   Signature: {form_data.get('signature')[:20]}...")
        
        return True
    except Exception as e:
        print(f"‚ùå Payment flow error: {e}")
        traceback.print_exc()
        return False

def test_url_generation():
    """Test URL generation for payment callbacks"""
    print("\nüîç Testing URL generation...")
    
    try:
        from utils.esewa import ESewaPayment
        esewa = ESewaPayment()
        
        # Test that URLs are properly formatted
        form_data, _ = esewa.create_payment_form_data(
            appointment=None,
            amount=100,
            tax_amount=13
        )
        
        success_url = form_data.get('success_url')
        failure_url = form_data.get('failure_url')
        
        print(f"‚úÖ Success URL: {success_url}")
        print(f"‚úÖ Failure URL: {failure_url}")
        
        if 'localhost' in success_url and 'localhost' in failure_url:
            print("‚úÖ URLs are properly configured for local development")
        else:
            print("‚ö†Ô∏è  URLs may need to be updated for production")
        
        return True
    except Exception as e:
        print(f"‚ùå URL generation error: {e}")
        traceback.print_exc()
        return False

def test_signature_verification():
    """Test signature verification logic"""
    print("\nüîç Testing signature verification...")
    
    try:
        from utils.esewa import ESewaPayment
        esewa = ESewaPayment()
        
        # Test with known good data
        test_data = {
            'transaction_code': '000AWEO',
            'status': 'COMPLETE',
            'total_amount': '1000.0',
            'transaction_uuid': '250610-162413',
            'product_code': 'EPAYTEST',
            'signed_field_names': 'transaction_code,status,total_amount,transaction_uuid,product_code,signed_field_names',
            'signature': '62GcfZTmVkzhtUeh+QJ1AqiJrjoWWGof3U+eTPTZ7fA='
        }
        
        # This should work with the correct signature
        result = esewa.verify_signature(test_data, test_data['signature'])
        print(f"‚úÖ Signature verification test completed (result: {result})")
        
        return True
    except Exception as e:
        print(f"‚ùå Signature verification error: {e}")
        traceback.print_exc()
        return False

def main():
    """Run all tests"""
    print("üöÄ Starting Runtime Error Tests for HealthPoint Application")
    print("=" * 60)
    
    tests = [
        test_imports,
        test_app_creation,
        test_esewa_utility,
        test_database_models,
        test_payment_flow,
        test_url_generation,
        test_signature_verification
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            if test():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå Test {test.__name__} crashed: {e}")
            failed += 1
    
    print("\n" + "=" * 60)
    print(f"üìä Test Results: {passed} passed, {failed} failed")
    
    if failed == 0:
        print("üéâ All tests passed! No runtime errors detected.")
        return True
    else:
        print("‚ö†Ô∏è  Some tests failed. Please review the errors above.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 